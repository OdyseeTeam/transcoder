version: '3.7'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
  db:
    image: postgres:14
    container_name: db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: odyseeteam
    volumes:
      - db-data:/var/lib/postgresql/data
    command:
      - -clogging_collector=on
      - -clog_statement=all
      - -clog_destination=stderr
  s3:
    image: minio/minio
    container_name: s3
    ports:
      - "9000:9000"
    volumes:
      - s3-data:/data
    environment:
      MINIO_ACCESS_KEY: ody
      MINIO_SECRET_KEY: odyseetes3
    command: server --address 0.0.0.0:9000 /data
  worker:
    image: odyseeteam/transcoder-worker:dev
    container_name: worker
    command:
      - ./worker
      - start
      - --rmq-addr=amqp://guest:guest@rabbitmq/
      - --work-dir=/storage
      - --debug
      - --workers=1
      - --threads=4
      - --worker-id=worker1
    # build:
    #   context: .
    #   dockerfile: Dockerfile-worker
    volumes:
      - ${PWD}/worker.ex.yml:/app/worker.yml
  worker2:
    image: odyseeteam/transcoder-worker:dev
    container_name: worker2
    command:
      - ./worker
      - start
      - --rmq-addr=amqp://guest:guest@rabbitmq/
      - --work-dir=/storage
      - --debug
      - --workers=1
      - --threads=4
      - --worker-id=worker2
    volumes:
      - ${PWD}/worker.ex.yml:/app/worker.yml
    # build:
    #   context: .
    #   dockerfile: Dockerfile-worker
  tower:
    image: odyseeteam/transcoder-tower:dev
    container_name: tower
    command:
      - ./tower
      - serve
      - --rmq-addr=amqp://guest:guest@rabbitmq/
      - --http-url=http://tower:8080
      - --debug
      - --dev-mode
      - --state-file=/storage/state.json
    volumes:
      - tower-data:/storage
      - ${PWD}/tower.ex.yml:/app/tower.yml
    ports:
      - "8080:8080"
    # build:
    #   context: .
    #   dockerfile: Dockerfile-tower
  transcoder:
    image: lbryio/transcoder:latest
    container_name: transcoder
    restart: always
    ports:
      - "18081:18081"
    volumes:
      - /home/lbry/videos:/app/videos
    labels:
      - traefik.http.routers.ghost.rule=Host(`na-wo.net`)
      - traefik.http.routers.ghost.tls=true
      - traefik.http.routers.ghost.tls.certresolver=myresolver
  traefik:
    image: traefik:v2.4
    container_name: traefik
    command: |
      --api.insecure=true
      --providers.docker
      --entrypoints.web.address=:80
      --entrypoints.web.http.redirections.entryPoint.to=websecure
      --entrypoints.web.http.redirections.entryPoint.scheme=https
      --entrypoints.web.http.redirections.entrypoint.permanent=true
      --entrypoints.websecure.address=:443
      --certificatesresolvers.myresolver.acme.tlschallenge=true
      --certificatesresolvers.myresolver.acme.email=a@tideland.net
      --certificatesresolvers.myresolver.acme.storage=acme.json
    ports:
      - "443:443"
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  tower-data: {}
  db-data: {}
  s3-data: {}
