// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package queue

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  status, ref, worker, url, sd_hash
) VALUES (
  'new', $1, $2, $3, $4
)
RETURNING id, created_at, updated_at, ref, status, attempts, stage, stage_progress, error, worker, url, sd_hash, result
`

type CreateTaskParams struct {
	Ref    string
	Worker string
	URL    string
	SDHash string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Ref,
		arg.Worker,
		arg.URL,
		arg.SDHash,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ref,
		&i.Status,
		&i.Attempts,
		&i.Stage,
		&i.StageProgress,
		&i.Error,
		&i.Worker,
		&i.URL,
		&i.SDHash,
		&i.Result,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, created_at, updated_at, ref, status, attempts, stage, stage_progress, error, worker, url, sd_hash, result FROM tasks
WHERE id = $1 AND STATUS IN ('new', 'active') LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ref,
		&i.Status,
		&i.Attempts,
		&i.Stage,
		&i.StageProgress,
		&i.Error,
		&i.Worker,
		&i.URL,
		&i.SDHash,
		&i.Result,
	)
	return i, err
}

const incAttempts = `-- name: IncAttempts :one
UPDATE tasks
SET attempts = attempts + 1 WHERE ref = $1
RETURNING id, created_at, updated_at, ref, status, attempts, stage, stage_progress, error, worker, url, sd_hash, result
`

func (q *Queries) IncAttempts(ctx context.Context, ref string) (Task, error) {
	row := q.db.QueryRowContext(ctx, incAttempts, ref)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ref,
		&i.Status,
		&i.Attempts,
		&i.Stage,
		&i.StageProgress,
		&i.Error,
		&i.Worker,
		&i.URL,
		&i.SDHash,
		&i.Result,
	)
	return i, err
}

const markDone = `-- name: MarkDone :one
UPDATE tasks
SET status = 'done', stage = 'done', result = $2 WHERE ref = $1
RETURNING id, created_at, updated_at, ref, status, attempts, stage, stage_progress, error, worker, url, sd_hash, result
`

type MarkDoneParams struct {
	Ref    string
	Result sql.NullString
}

func (q *Queries) MarkDone(ctx context.Context, arg MarkDoneParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, markDone, arg.Ref, arg.Result)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ref,
		&i.Status,
		&i.Attempts,
		&i.Stage,
		&i.StageProgress,
		&i.Error,
		&i.Worker,
		&i.URL,
		&i.SDHash,
		&i.Result,
	)
	return i, err
}

const setError = `-- name: SetError :one
UPDATE tasks
SET status = 'error', error = $2 WHERE ref = $1
RETURNING id, created_at, updated_at, ref, status, attempts, stage, stage_progress, error, worker, url, sd_hash, result
`

type SetErrorParams struct {
	Ref   string
	Error sql.NullString
}

func (q *Queries) SetError(ctx context.Context, arg SetErrorParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, setError, arg.Ref, arg.Error)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ref,
		&i.Status,
		&i.Attempts,
		&i.Stage,
		&i.StageProgress,
		&i.Error,
		&i.Worker,
		&i.URL,
		&i.SDHash,
		&i.Result,
	)
	return i, err
}

const setStageProgress = `-- name: SetStageProgress :one
UPDATE tasks
SET stage = $2, stage_progress = $3 WHERE ref = $1
RETURNING id, created_at, updated_at, ref, status, attempts, stage, stage_progress, error, worker, url, sd_hash, result
`

type SetStageProgressParams struct {
	Ref           string
	Stage         sql.NullString
	StageProgress sql.NullInt32
}

func (q *Queries) SetStageProgress(ctx context.Context, arg SetStageProgressParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, setStageProgress, arg.Ref, arg.Stage, arg.StageProgress)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ref,
		&i.Status,
		&i.Attempts,
		&i.Stage,
		&i.StageProgress,
		&i.Error,
		&i.Worker,
		&i.URL,
		&i.SDHash,
		&i.Result,
	)
	return i, err
}

const setStatus = `-- name: SetStatus :one
UPDATE tasks
SET status = $2 WHERE ref = $1
RETURNING id, created_at, updated_at, ref, status, attempts, stage, stage_progress, error, worker, url, sd_hash, result
`

type SetStatusParams struct {
	Ref    string
	Status string
}

func (q *Queries) SetStatus(ctx context.Context, arg SetStatusParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, setStatus, arg.Ref, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ref,
		&i.Status,
		&i.Attempts,
		&i.Stage,
		&i.StageProgress,
		&i.Error,
		&i.Worker,
		&i.URL,
		&i.SDHash,
		&i.Result,
	)
	return i, err
}
